class Metasploit::Framework::Command::Exploit < Metasploit::Framework::Command::Base
  include Metasploit::Framework::Command::Parent

  self.description = 'Launch an exploit attempt'

  #
  # Subcommands
  #

  subcommand :help
  subcommand :simple,
             default: true

  #
  # Methods
  #

  delegate :framework,
           :metasploit_instance,
           allow_nil: true,
           to: :dispatcher

  def option_parser
    unless instance_variable_defined? :@option_parser
      super

      #
      # Body
      #

      module_class_reference_name_option(
          @option_parser,
          module_type: 'encoder'
      )

      @option_parser.on(
          '-f',
          '--[no-]force',
          "Force the exploit to run regardless of the value of `framework.data_store['MinimumRank']` (#{framework.data_store['MinimumRank']})."
      ) do |force|
        subcommand_by_name[:simple].force = force
      end

      @option_parser.on(
          '-j',
          '--[no-]job',
          'Run in the context of a job.'
      ) do |job|
        subcommand_by_name[:simple].job = job
      end

      module_class_reference_name_option(
          @option_parser,
          module_type: 'nop'
      )

      @option_parser.on(
          '-o',
          '--options VAR1=VAL1,VAR2=VAL2',
          Array,
          'A comma separated list of options in VAR=VAL format.'
      ) do |pair_array|
        subcommand_by_name[:simple].options = pair_array.each_with_object({}) { |pair, options|
          variable, value = pair.split('=', 2)
          options[variable] = value
        }
      end

      module_class_reference_name_option(
          @option_parser,
          module_type: 'payload'
      )

      default_target_name_clause = ''

      if metasploit_instance
        default_target_name_clause = " (#{metasploit_instance.data_store['TARGET']}) set for #{metasploit_instance.full_name}"
      end

      @option_parser.on(
          '-t',
          '--target-name NAME',
          'The name of the target to use.',
          "Defaults to `data_store['TARGET']`#{default_target_name_clause}."
      ) do |target_name|
        subcommand_by_name[:simple].target_name = target_name
      end

      @option_parser.on(
          '-z',
          '--[no-]background',
          'Do not interact with the session after successful exploitation.'
      ) do |background|
        subcommand_by_name[:simple].background = background
      end
    end

    @option_parser
  end

  private

  def module_class_reference_name_option(option_parser, options={})
    options.assert_valid_keys(:module_type)

    module_type = options.fetch(:module_type)
    short_option_name = module_type[0,1]
    data_store_key = module_type.capitalize
    attribute = "#{module_type}_class_reference_name"

    location = ''

    if metasploit_instance
      location = " (#{metasploit_instance.data_store[data_store_key]}) set for #{metasploit_instance.full_name}"
    end

    default_sentence = "Defaults to `data_store[#{data_store_key.inspect}]`#{location}"

    option_parser.on(
        "-#{short_option_name}",
        "--#{module_type}-class-reference-name REFERENCE_NAME",
        "The #{module_type} class reference name to use.",
        default_sentence
    ) do |module_type_class_reference_name|
      subcommand_by_name[:simple].send("#{attribute}=", module_type_class_reference_name)
    end
  end
end
