require 'spec_helper'

require 'file/find'

describe Metasploit::Framework::UI::Console::Command::Exploit::Help do
  include_context 'Msf::Ui::Console::Driver'
  include_context 'output'

  subject(:command) do
    described_class.new(
        parent: parent
    )
  end

  let(:dispatcher) do
    Msf::Ui::Console::CommandDispatcher::Core.new(msf_ui_console_driver)
  end

  let(:parent) do
    Metasploit::Framework::UI::Console::Command::Exploit.new(
        dispatcher: dispatcher
    )
  end

  it_should_behave_like 'Metasploit::Framework::UI::Console::Command::Child'

  context '#run_with_valid' do
    include_context 'database cleaner'
    include_context 'Metasploit::Framework::Spec::Constants cleaner'
    include_context 'Msf::Simple::Framework'

    subject(:run_with_valid) do
      command.send(:run_with_valid)
    end

    #
    # lets
    #

    let(:metasploit_class) do
      # exploits only have one metasploit_class
      metasploit_module.each_metasploit_class.first
    end

    let(:metasploit_instance) do
      metasploit_class.new(framework: framework)
    end

    let(:metasploit_module) do
      module_ancestor_load.metasploit_module
    end

    let(:module_ancestor) do
      module_path.module_ancestors.new(real_path: module_ancestor_real_path)
    end

    let(:module_ancestor_load) do
      Metasploit::Framework::Module::Ancestor::Load.new(module_ancestor: module_ancestor)
    end

    let(:module_ancestor_real_path) do
      module_ancestor_real_paths.sample
    end

    let(:module_ancestor_real_paths) do
      File::Find.new(
          ftype: 'file',
          path: File.join(module_path.real_path, 'exploits'),
          pattern: "*#{Metasploit::Model::Module::Ancestor::EXTENSION}"
      ).find
    end

    let(:module_path) do
      FactoryGirl.create(
          :mdm_module_path,
          gem: 'metasploit-framework',
          name: 'modules',
          real_path: Metasploit::Framework.root.join('modules').to_path
      )
    end

    let(:option_parser) do
      parent.option_parser
    end

    #
    # Callbacks
    #

    before(:each) do
      framework.modules.cache.write_module_ancestor_load(module_ancestor_load)
      allow(dispatcher).to receive(:metasploit_instance).and_return(metasploit_instance)
    end

    it 'should print help for option parser' do
      option_parser.should_receive(:help)

      quietly
    end

    it 'should include the metasploit_instance full name' do
      output.should include(metasploit_instance.full_name)
    end
  end
end