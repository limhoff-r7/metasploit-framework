require 'spec_helper'

require 'msf/ui'
require 'msf/ui/console/command_dispatcher/exploit'

describe Msf::Ui::Console::CommandDispatcher::Exploit do
  include_context 'metasploit_super_class_by_module_type'
  include_context 'Msf::DBManager'
  include_context 'Msf::Ui::Console::Driver'

  subject(:command_dispatcher) do
    described_class.new(msf_ui_console_driver)
  end

  let(:metasploit_class) do
    Class.new(metasploit_super_class)
  end

  let(:metasploit_instance) do
    metasploit_class.new
  end

  let(:module_class) do
    FactoryGirl.create(
        :mdm_module_class,
        module_type: module_type
    )
  end

  let(:module_type) do
    'auxiliary'
  end

  #
  # Callbacks
  #

  before(:each) do
    allow(metasploit_class).to receive(:module_class).and_return(module_class)
    allow(msf_ui_console_driver).to receive(:metasploit_instance).and_return(metasploit_instance)
  end

  it_should_behave_like 'Msf::Ui::Console::ModuleCommandDispatcher'

  it_should_behave_like 'Metasploit::Framework::UI::Console::Command::Dispatcher.command',
                        :check,
                        klass: Metasploit::Framework::UI::Console::Command::Check

  context '#commands' do
    subject(:commands) do
      command_dispatcher.commands
    end

    its(['check']) { should == 'Check to see if a target is vulnerable' }
    its(['exploit']) { should == 'Launch an exploit attempt' }
    its(['rcheck']) { should == 'Reloads the module and checks if the target is vulnerable' }
    its(['rerun'])  { should == 'Alias for rexploit' }
    its(['rexploit']) { should == 'Reloads the module and launches an exploit attempt' }
    its(['run']) { should == 'Alias for exploit' }
  end

  context '#name' do
    subject(:name) do
      command_dispatcher.name
    end

    it { should == 'Exploit' }
  end
end
