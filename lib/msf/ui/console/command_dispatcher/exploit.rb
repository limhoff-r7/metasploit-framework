# -*- coding: binary -*-

# Exploit module command dispatcher.
class Msf::Ui::Console::CommandDispatcher::Exploit
  include Metasploit::Framework::Command::Dispatcher
  include Msf::Ui::Console::ModuleCommandDispatcher

  #
  # Commands
  #

  command :check
  command :exploit

  #
  # Methods
  #

  #
  # Returns the hash of exploit module specific commands.
  #
  def commands
    super.merge(
      "rcheck"   => "Reloads the module and checks if the target is vulnerable",
      "rerun"    => "Alias for rexploit",
      "rexploit" => "Reloads the module and launches an exploit attempt",
      "run"      => "Alias for exploit"
    )
  end

  #
  # Returns the name of the command dispatcher.
  #
  def name
    "Exploit"
  end

  alias cmd_run cmd_exploit
  alias cmd_run_help cmd_exploit_help

  #
  # Reloads an exploit module and checks the target to see if it's
  # vulnerable.
  #
  def cmd_rcheck(*args)
    reload()

    cmd_check(*args)
  end

  #
  # Reloads an exploit module and launches an exploit.
  #
  def cmd_rexploit(*args)
    return cmd_rexploit_help if args.include? "-h"

    # Stop existing job and reload the module
    if reload(true)
      # Delegate to the exploit command unless the reload failed
      cmd_exploit(*args)
    end
  end

  alias cmd_rerun cmd_rexploit

  def cmd_rexploit_help
    print_line "Usage: rexploit [options]"
    print_line
    print_line "Reloads a module, stopping any associated job, and launches an exploitation attempt."
    print @@exploit_opts.usage
  end

  alias cmd_rerun_help cmd_rexploit_help

  #
  # Picks a reasonable payload and minimally configures it
  #
  def self.choose_payload(mod)

    # Choose either the real target or an invalid address
    # This is used to determine the LHOST value
    rhost = mod.datastore['RHOST'] || '50.50.50.50'

    pset = mod.compatible_payload_instances.map{|x| x[0] }
    pref.each do |n|
      if(pset.include?(n))
        mod.datastore['PAYLOAD'] = n
        mod.datastore['LHOST']   = Rex::Socket.source_address(rhost)
        return n
      end
    end
    return
  end

end
