module Msf::Exploit::Payload::Nop
  #
  # Generates a nop sled of a supplied length and returns it to the caller.
  #
  def make_nops(count)
    nop_sled = nil

    if debugging?
      # If we're debugging, then make_nops will return a safe sled.  We
      # currently assume x86.
      nop_sled = "\x90" * count
    elsif payload_instance
      # capture outside of loop
      save_registers = nop_save_registers
      bad_chars = payload_badchars

      payload_instance.compatible_nop_instances.each { |nop_instance|
        begin
          nop_instance.copy_ui(self)
          nop_sled = nop_instance.generate_sled(
              count,
              'BadChars'      => bad_chars,
              'SaveRegisters' => save_registers
          )
        rescue => error
          elog(
              "Nop generator (#{nop_instance.reference_name}) failed to generate sled " \
              "for exploit (#{reference_name}): #{error.class} #{error}\n#{error.backtrace.join("\n")}",
              'core',
              LEV_0
          )
        else
          break
        end
      }
    end

    nop_sled
  end

  #
  # Returns the first compatible NOP generator for this exploit's payload
  # instance.
  #
  def nop_generator
    return nil if (!payload_instance)

    payload_instance.compatible_cache_nop_instances.each { |nopname, nopmod|
      return nopmod.new
    }
  end

  #
  # Returns the list of registers that the NOP generator should save,
  # if any.  It will use the current target's save registers in precedence
  # over those defined globally for the exploit module.
  #
  # If there are no save registers, nil is returned.
  #
  def nop_save_registers(explicit_target = nil)
    explicit_target ||= target

    if explicit_target
      explicit_target.save_registers
    else
      save_registers
    end
  end

  #
  # Maximum number of nops to use as a hint to the framework.
  # Nil signifies that the framework should decide.
  #
  def payload_max_nops(explicit_target = nil)
    explicit_target ||= target

    if (explicit_target and explicit_target.payload_max_nops)
      explicit_target.payload_max_nops
    else
      payload_info['MaxNops'] || nil
    end
  end

  #
  # Minimum number of nops to use as a hint to the framework.
  # Nil signifies that the framework should decide.
  #
  def payload_min_nops(explicit_target = nil)
    explicit_target ||= target

    if (explicit_target and explicit_target.payload_min_nops)
      explicit_target.payload_min_nops
    else
      payload_info['MinNops'] || nil
    end
  end
end