module Msf::Exploit::Failure
  #
  # Attributes
  #

  # @!attribute [rw] fail_detail
  #   Detailed exception string indicating why the exploit was not successful
  #
  #   @return [String]
  attr_accessor  :fail_detail


  # @!attribute [rw] fail_reason
  #   Why this exploit was not successful.
  #
  #   @return [String]
  attr_accessor :fail_reason

  #
  # Methods
  #

  def fail_with(reason,msg=nil)
    self.fail_reason = reason
    self.fail_detail = msg
    raise Msf::Exploit::Failed, (msg || "No reason given")
  end

  def report_failure
    framework.db.with_connection {
      info = {
          :timestamp   => Time.now.utc,
          :workspace   => framework.db.find_workspace(self.workspace),
          :module      => self.full_name,
          :fail_reason => self.fail_reason,
          :fail_detail => self.fail_detail,
          :target_name => self.target.name,
          :username    => self.owner,
          :refs        => self.references
      }

      if self.datastore['RHOST'] and self.options['RHOST']
        info[:host] = self.datastore['RHOST']
      end

      if self.datastore['RPORT'] and self.options['RPORT']
        info[:port] = self.datastore['RPORT']
        if self.class.ancestors.include?(Msf::Exploit::Remote::Tcp)
          info[:proto] = 'tcp'
        end
      end

      framework.db.report_exploit_failure(info)
    }
  end
end