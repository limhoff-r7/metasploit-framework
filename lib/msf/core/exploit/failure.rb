module Msf::Exploit::Failure
  #
  # Attributes
  #

  # @!attribute [rw] fail_detail
  #   Detailed exception string indicating why the exploit was not successful
  #
  #   @return [String]
  attr_accessor  :fail_detail


  # @!attribute [rw] fail_reason
  #   Why this exploit was not successful.
  #
  #   @return [String]
  attr_accessor :fail_reason

  #
  # Methods
  #

  def fail_with(reason,msg=nil)
    self.fail_reason = reason
    self.fail_detail = msg
    raise Msf::Exploit::Failed, (msg || "No reason given")
  end

  def report_failure
    framework.db.with_connection {
      creation = Metasploit::Framework::Module::Instance::Failure::Creation.new(
          exploit_instance: self
      )

      # creation can be invalid if RHOST is not an option or not defined, in which case the failure cannot be created
      # because there will be no host to log the failure against.
      if creation.valid?
        creation.create
      else
        wlog(
            "Could not report failure of exploit (#{self.reference_name}):\n" \
            "#{creation.errors.full_messages.join("\n")}"
        )
      end
    }
  end
end